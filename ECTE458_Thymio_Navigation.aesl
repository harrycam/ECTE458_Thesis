<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="2" name="target_tx"/>
<constant value="4200" name="CLOSING_HIGH"/>
<constant value="1900" name="CLOSING_LOW"/>
<constant value="750" name="DIST_CLOSE_HIGH"/>
<constant value="250" name="DIST_CLOSE_LOW"/>
<constant value="250" name="DIST_ZERO_HIGH"/>
<constant value="25" name="DIST_ZERO_LOW"/>
<constant value="2100" name="FAR_HIGH"/>
<constant value="1500" name="FAR_LOW"/>
<constant value="4250" name="NEAR_HIGH"/>
<constant value="3250" name="NEAR_LOW"/>
<constant value="90" name="THETA_LEFT_HIGH"/>
<constant value="40" name="THETA_LEFT_LOW"/>
<constant value="-40" name="THETA_RIGHT_HIGH"/>
<constant value="-90" name="THETA_RIGHT_LOW"/>
<constant value="60" name="THETA_SMALL_LEFT_HIGH"/>
<constant value="40" name="THETA_SMALL_LEFT_LOW"/>
<constant value="-40" name="THETA_SMALL_RIGHT_HIGH"/>
<constant value="-60" name="THETA_SMALL_RIGHT_LOW"/>
<constant value="10" name="THETA_ZERO_HIGH"/>
<constant value="-10" name="THETA_ZERO_LOW"/>


<!--node Thymio-II Wireless-->
<node nodeId="{7b3a7760-96f3-4fa2-9f43-d2dbad6b6eb8}" name="Thymio-II Wireless"><![CDATA[# Thymio-II program: fuzzy algorithm for autonomous navigation

# Adapted from Fuzzy code by Moti Ben-Ari
# Copyright 2014 by Moti Ben-Ari
# CreativeCommons BY-SA 3.0

var state = 0 # The state 0 = off, 1 = on
var far_left # The value read from prox.horizontal[0]
var left # The value read from prox.horizontal[1]
var middle # The value read from prox.horizontal[2]
var right # The value read from prox.horizontal[3]
var far_right # The value read from prox.horizontal[4]
var value
var obstacle_detect # The value of the sensor location for the obstacle (multiplied by 10 compared to ECTE441)
var obstacle_dist # Value of the distance to obstacle from sensors
var ultra_sens_p[6] # Certainties of premises: no obstacle, left side, left, middle, right, right side
var ultra_dis_p[3] # Certainties of premises: far, close, in front
var left_wheel_c[5] # Certainties of consequents: rev_f, rev, zero, for, for_f
var right_wheel_c[5] # Certainties of consequents: rev_f, rev, zero, for, for_f
var temp           # Temporary variable for computing premises
var temp2          # Additional temporary variable
var temp_not # Temporary variable for computing NOT statements
var temp_not_obs # Additional temporary variable for NOT statements

var left_centers[5] = [-2, -1, 0, 1, 2] # Centers of output membership functions
var right_centers[5] = [-2, -1, 0, 1, 2] # Centers of output membership functions

var height         # Height (certainty) of an output membership function
var width =  200   # Width of triangular membership function
var area           # Area under a consequent membership function
var mid            # Middle of membership function

var accum_weighted # Accumulated weighted area over all rules
var accum_areas    # Accumulated area over all rules
var crisp_right    # Crisp output
var crisp_left     # Crisp output
var i              # Loop index variable

var theta # Angle to target in degrees
var distance # Distance to target
var theta_p[5] # Certainties of premises: right, small right, zero, small left, left
var distance_p[2] # Certainties of premises: zero, close

# Stop the algorithm and the motors
sub stop
  state = 0
  motor.left.target  = 0
  motor.right.target = 0

# Forward button to start
onevent button.forward
  call leds.circle(0,0,0,0,0,0,0,0)
  state = 1

# Center button to stop
onevent button.center
  callsub stop

# Wireless communication receive and store localisation data
onevent target_tx
  theta = event.args[0]
  distance = event.args[1]

# Determines the sensor that the object is closest too and the value of that sensor  
sub obstacle_location
  far_left = prox.horizontal[0]
  left = prox.horizontal[1]
  middle = prox.horizontal[2]
  right = prox.horizontal[3]
  far_right = prox.horizontal[4]
  
  # Create active sensor feedback data structure for fuzzy model
  
  if middle >= left and middle >= right and middle >= far_left and middle >= far_right and middle >= 50 then obstacle_detect = 0
    obstacle_dist = middle
  elseif left >= middle and left >= right and left >= far_left and left >= far_right and left >= 50 then obstacle_detect = -25
    obstacle_dist = left
    if  left-middle<= 1500 then
      obstacle_detect = 0
      obstacle_dist = middle
    end
  elseif right >= middle and right >= left and right >= far_left and right >= far_right and right >= 50 then obstacle_detect = 25
    obstacle_dist = right
  elseif far_left >= middle and far_left >= left and far_left >= right and far_left >= far_right and far_left >= 50 then obstacle_detect = -50
    obstacle_dist = far_left
    if  far_left-middle<= 1500 then
      obstacle_detect = 0
      obstacle_dist = middle
    end
  elseif far_right >= middle and far_right >= left and far_right >= right and far_right >= far_left and far_right >= 50 then obstacle_detect = 50
    obstacle_dist = far_right
  else obstacle_detect = -90
    obstacle_dist = 0
  end

#   Fuzzification of the sensor input value
#   Outputs for each linguistic variable are in "premises"
#   Input membership functions: far, closing, near
#   Certainties are scaled in the range 0 .. 100
sub fuzzify

  call math.fill(ultra_sens_p, 0)

  # Fuzzifying the sensor location for obstacles
  if  obstacle_detect == -90 then ultra_sens_p[0] = 100 # No obstacle MF
  elseif  obstacle_detect == -50 then ultra_sens_p[1] = 100 # Far left obstacle MF
  elseif  obstacle_detect == -25 then ultra_sens_p[2] = 100 # Left obstacle MF
  elseif  obstacle_detect == 0 then ultra_sens_p[3] = 100 # Middle obstacle MF
  elseif  obstacle_detect == 25 then ultra_sens_p[4] = 100 # Right obstacle MF
  elseif  obstacle_detect == 50 then ultra_sens_p[5] = 100 # Far right obstacle MF	
  end

  # "far" uses a saturated membership function
  if obstacle_dist <= FAR_LOW then ultra_dis_p[0] = 100
  elseif obstacle_dist >= FAR_HIGH then ultra_dis_p[0] = 0
  else 
    call math.muldiv(temp, (obstacle_dist - FAR_LOW), 100, (FAR_HIGH - FAR_LOW))
    ultra_dis_p[0] = 100 - temp
  end

  # "closing" uses a triangular membership function
  mid = CLOSING_LOW + (CLOSING_HIGH-CLOSING_LOW)/2
  if obstacle_dist < CLOSING_LOW then ultra_dis_p[1] = 0
  elseif obstacle_dist > CLOSING_HIGH then ultra_dis_p[1] = 0
  elseif obstacle_dist < mid then
    call math.muldiv(temp, (obstacle_dist - CLOSING_LOW), 100, (mid - CLOSING_LOW))
    ultra_dis_p[1] = temp
  else
    call math.muldiv(temp, (obstacle_dist - mid), 100, (CLOSING_HIGH - mid))
    ultra_dis_p[1] = 100 - temp
  end

  # "near" uses a saturated membership function
  if obstacle_dist >= NEAR_HIGH then ultra_dis_p[2] = 100
  elseif obstacle_dist <= NEAR_LOW then ultra_dis_p[2] = 0
  else
    call math.muldiv(temp, (obstacle_dist - NEAR_LOW), 100, (NEAR_HIGH - NEAR_LOW))
    ultra_dis_p[2] = temp
  end
  
  # "theta right" uses a saturated membership function
  if theta <= THETA_RIGHT_LOW then theta_p[0] = 100
  elseif theta >= THETA_RIGHT_HIGH then theta_p[0] = 0
  else
    call math.muldiv(temp, (THETA_RIGHT_HIGH-theta), 100, (THETA_RIGHT_HIGH - THETA_RIGHT_LOW))
    theta_p[0] = temp
  end
  
  # "theta small right" uses a triangular membership function
  mid = THETA_SMALL_RIGHT_LOW + (THETA_SMALL_RIGHT_HIGH-THETA_SMALL_RIGHT_LOW)/2
  if theta < THETA_SMALL_RIGHT_LOW then theta_p[1] = 0
  elseif theta > THETA_SMALL_RIGHT_HIGH then theta_p[1] = 0
  elseif theta < mid then
    call math.muldiv(temp, (theta - THETA_SMALL_RIGHT_LOW), 100, (mid - THETA_SMALL_RIGHT_LOW))
    theta_p[1] = temp
  else
    call math.muldiv(temp, (theta - mid), 100, (THETA_SMALL_RIGHT_HIGH - mid))
    theta_p[1] = 100 - temp
  end
  
  # "theta zero" uses a triangular membership function
  mid = THETA_ZERO_LOW + (THETA_ZERO_HIGH-THETA_ZERO_LOW)/2
  if theta < THETA_ZERO_LOW then theta_p[2] = 0
  elseif theta > THETA_ZERO_HIGH then theta_p[2] = 0
  elseif theta < mid then
    call math.muldiv(temp, (theta - THETA_ZERO_LOW), 100, (mid - THETA_ZERO_LOW))
    theta_p[2] = temp
  else
    call math.muldiv(temp, (theta - mid), 100, (THETA_ZERO_HIGH - mid))
    theta_p[2] = 100 - temp
  end
  
    # "theta small left" uses a triangular membership function
  mid = THETA_SMALL_LEFT_LOW + (THETA_SMALL_LEFT_HIGH-THETA_SMALL_LEFT_LOW)/2
  if theta < THETA_SMALL_LEFT_LOW then theta_p[3] = 0
  elseif theta > THETA_SMALL_LEFT_HIGH then theta_p[3] = 0
  elseif theta < mid then
    call math.muldiv(temp, (theta - THETA_SMALL_LEFT_LOW), 100, (mid - THETA_SMALL_LEFT_LOW))
    theta_p[3] = temp
  else
    call math.muldiv(temp, (theta - mid), 100, (THETA_SMALL_LEFT_HIGH - mid))
    theta_p[3] = 100 - temp
  end
  
  # "theta left" uses a saturated membership function
  if theta >= THETA_LEFT_HIGH then theta_p[4] = 100
  elseif theta <= THETA_LEFT_LOW then theta_p[4] = 0
  else
    call math.muldiv(temp, (theta - THETA_LEFT_LOW), 100, (THETA_LEFT_HIGH - THETA_LEFT_LOW))
    theta_p[4] = temp
  end
  
  # "distance zero" uses a saturated membership function
  if distance <= DIST_ZERO_LOW then distance_p[0] = 100
  elseif distance >= DIST_ZERO_HIGH then distance_p[0] = 0
  else
    call math.muldiv(temp, (DIST_ZERO_HIGH-distance), 100, (DIST_ZERO_HIGH - DIST_ZERO_LOW))
    distance_p[0] = temp
  end
  
  # "distance close" uses a triangular membership function
  mid = DIST_CLOSE_LOW + (DIST_CLOSE_HIGH-DIST_CLOSE_LOW)/2
  if distance < DIST_CLOSE_LOW then distance_p[1] = 0
  elseif distance > DIST_CLOSE_HIGH then distance_p[1] = 0
  elseif theta < mid then
    call math.muldiv(temp, (distance - DIST_CLOSE_LOW), 100, (mid - DIST_CLOSE_LOW))
    distance_p[1] = temp
  else
    call math.muldiv(temp, (distance - mid), 100, (DIST_CLOSE_HIGH - mid))
    distance_p[1] = 100 - temp
  end


# Apply inference rules
sub apply_rules
  call math.fill(right_wheel_c, 0)
  call math.fill(left_wheel_c, 0)

  # Rule 1: if close and obstacle is left then left_vel = fast forward and right_vel = zero
  if ultra_dis_p[1] != 0 and ultra_sens_p[2] != 0 then
   	call math.min(left_wheel_c[4], ultra_dis_p[1], ultra_sens_p[2])
   	call math.min(right_wheel_c[2], ultra_dis_p[1], ultra_sens_p[2])
  end

  # Rule 2: if close and obstacle is right then left_vel = zero and right_vel = fast forward
  if ultra_dis_p[1] != 0 and ultra_sens_p[4] != 0 then
   	call math.min(right_wheel_c[4], ultra_dis_p[1], ultra_sens_p[4])
   	call math.min(left_wheel_c[2], ultra_dis_p[1], ultra_sens_p[4])
  end

  # Rule 3: if near and obstacle is left_side then left_vel = reverse and right_vel = fast reverse
  if ultra_dis_p[2] != 0 and ultra_sens_p[1] != 0 then 
   	call math.min(temp, ultra_dis_p[2], ultra_sens_p[1])
	temp2 = left_wheel_c[1]
	call math.max(left_wheel_c[1], temp, temp2)
	temp2 = right_wheel_c[0]
	call math.max(right_wheel_c[0], temp, temp2)
  end

  # Rule 4: if near and obstacle is left then left_vel = forward and right_vel = fast reverse
  if ultra_dis_p[2] != 0 and ultra_sens_p[2] != 0 then 
   	call math.min(temp, ultra_dis_p[2], ultra_sens_p[2])
	temp2 = left_wheel_c[3]
	call math.max(left_wheel_c[3], temp, temp2)
	temp2 = right_wheel_c[0]
	call math.max(right_wheel_c[0], temp, temp2)
  end

  # Rule 5: if near and obstacle is middle then left_vel = fast reverse and right_vel = fast forward
  if ultra_dis_p[2] != 0 and ultra_sens_p[3] != 0 then 
   	call math.min(temp, ultra_dis_p[2], ultra_sens_p[3])
	temp2 = left_wheel_c[0]
	call math.max(left_wheel_c[0], temp, temp2)
	temp2 = right_wheel_c[4]
	call math.max(right_wheel_c[4], temp, temp2)
  end

  # Rule 6: if near and obstacle is right then left_vel = fast reverse and right_vel = forward
  if ultra_dis_p[2] != 0 and ultra_sens_p[4] != 0 then 
   	call math.min(temp, ultra_dis_p[2], ultra_sens_p[4])
	temp2 = left_wheel_c[0]
	call math.max(left_wheel_c[0], temp, temp2)
	temp2 = right_wheel_c[3]
	call math.max(right_wheel_c[3], temp, temp2)
  end

  # Rule 7: if near and obstacle is right side then left_vel = fast reverse and right_vel = reverse
  if ultra_dis_p[2] != 0 and ultra_sens_p[5] != 0 then 
   	call math.min(temp, ultra_dis_p[2], ultra_sens_p[5])
	temp2 = left_wheel_c[0]
	call math.max(left_wheel_c[0], temp, temp2)
	temp2 = right_wheel_c[1]
	call math.max(right_wheel_c[1], temp, temp2)
  end
  
  # Rule 8: if distance is not zero then left_vel = forward and right_vel = forward
  temp_not = 100 - distance_p[0]
  temp_not_obs = 100 - ultra_dis_p[2]
  call math.min(temp, temp_not, temp_not_obs)
  if temp_not != 0 then 
	temp2 = left_wheel_c[3]
	call math.max(left_wheel_c[3], temp, temp2)
	temp2 = right_wheel_c[3]
	call math.max(right_wheel_c[3], temp, temp2)
  end
  
  # Rule 9: if far and theta is right then left_vel = forward and right_vel = reverse
  if ultra_dis_p[0] != 0 and theta_p[0] != 0 then 
   	call math.min(temp, ultra_dis_p[0], theta_p[0])
	temp2 = left_wheel_c[3]
	call math.max(left_wheel_c[3], temp, temp2)
	temp2 = right_wheel_c[1]
	call math.max(right_wheel_c[1], temp, temp2)
  end
  
  # Rule 10: if far and theta is left then left_vel = reverse and right_vel = forward
  if ultra_dis_p[0] != 0 and theta_p[4] != 0 then 
   	call math.min(temp, ultra_dis_p[0], theta_p[4])
	temp2 = left_wheel_c[1]
	call math.max(left_wheel_c[1], temp, temp2)
	temp2 = right_wheel_c[3]
	call math.max(right_wheel_c[3], temp, temp2)
  end
  
  # Rule 11: if distance is zero then left_vel = zero and right_vel = zero
  if distance_p[0] != 0 then 
	temp2 = left_wheel_c[2]
	call math.max(left_wheel_c[2], distance_p[0], temp2)
	temp2 = right_wheel_c[2]
	call math.max(right_wheel_c[2], distance_p[0], temp2)
  end

#  area = width * (height - height*height/2) 
sub compute_area
   call math.muldiv(area, width, height, 1)
   call math.muldiv(temp, area, height, 200)
   area -= temp
   area /= 100

# Defuzzify by computing the center of gravity
#   Compute sum of areas of fuzzy output membership functions
#     weighted by the centers of the functions
#   Divide by sum of unweighted areas
sub defuzzify
  accum_weighted = 0
  accum_areas = 0
  for  i in 0:4 do
      height = left_wheel_c[i]
      callsub compute_area
  	  accum_weighted += left_centers[i] * area
  	  accum_areas += area
  end
  if accum_areas == 0 then accum_areas = 1 end

  # Compute crisp output value
  call math.muldiv(crisp_left, accum_weighted, 100, accum_areas)

  accum_weighted = 0
  accum_areas = 0
  for  i in 0:4 do
      height = right_wheel_c[i]
      callsub compute_area
  	  accum_weighted += right_centers[i] * area
  	  accum_areas += area
  end
  if accum_areas == 0 then accum_areas = 1 end

  # Compute crisp output value
  call math.muldiv(crisp_right, accum_weighted, 100, accum_areas)


# Proximity event handler
onevent prox
  if state == 0 then return end
  callsub obstacle_location
  callsub fuzzify
  callsub apply_rules
  callsub defuzzify
  motor.left.target  =  crisp_left
  motor.right.target =  crisp_right
]]></node>


</network>
